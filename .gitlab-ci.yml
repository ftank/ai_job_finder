image: docker:latest

stages:
  - build
  - test
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  DOCKER_USER: ${DEPLOY_TOKEN_USERNAME}
  DOCKER_PASSWORD: ${DEPLOY_TOKEN_PASSWORD}


# Backend build and test
build_backend:
  stage: build
  services:
    - docker:dind
  before_script:
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USER" --password-stdin registry.gitlab.com
  script:
    - docker build -t $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHA ./backend
    - docker push $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHA
  only:
    - main

test_backend:
  stage: test
  image: python:3.9
  script:
    - pip install -r backend/requirements.txt
    - python -m pytest backend/tests/
  allow_failure: true
  only:
    - main

# Frontend build and test
build_frontend:
  stage: build
  image: node:16
  script:
    - cd frontend
    - npm install
    - npm run build
  artifacts:
    paths:
      - frontend/build/
  only:
    - main

test_frontend:
  stage: test
  image: node:16
  script:
    - cd frontend
    - npm install
    - npm test
  allow_failure: true
  only:
    - main

# Deployment
deploy:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - apk add --no-cache docker-compose
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USER" --password-stdin registry.gitlab.com
  script:
    # Build and push frontend image
    - docker build -t $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHA ./frontend
    - docker push $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHA
    
    # Create docker-compose file with correct image tags
    - |
      cat > docker-compose.yml << EOF
      version: '3.8'
      services:
        backend:
          image: $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHA
          ports:
            - "5000:5000"
          environment:
            - FLASK_ENV=production
            - FLASK_APP=app.py
            - OPENAI_API_KEY=${OPENAI_API_KEY}
            - LINKEDIN_CLIENT_ID=${LINKEDIN_CLIENT_ID}
            - LINKEDIN_CLIENT_SECRET=${LINKEDIN_CLIENT_SECRET}
          networks:
            - app-network

        frontend:
          image: $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHA
          ports:
            - "3000:3000"
          environment:
            - REACT_APP_API_URL=http://backend:5000
          depends_on:
            - backend
          networks:
            - app-network

      networks:
        app-network:
          driver: bridge
      EOF
    
    # Deploy using docker-compose
    - docker-compose up -d
  environment:
    name: production
    url: http://localhost:3000
  variables:
    FLASK_ENV: production
    FLASK_APP: app.py
    OPENAI_API_KEY: ${OPENAI_API_KEY}
    LINKEDIN_CLIENT_ID: ${LINKEDIN_CLIENT_ID}
    LINKEDIN_CLIENT_SECRET: ${LINKEDIN_CLIENT_SECRET}
  only:
    - main